# Generated by Django 3.2.12 on 2022-06-13 17:30
import html
import re

from datetime import timedelta

from django.db import migrations
from django.utils.timezone import now


def get_short_description(description):
    """
    Deduce the short_description from a given html description string
    """
    description_stripped_tags = re.sub(r'<[^>]*>', ' ', description)
    description_without_spaces = re.sub(r'\s+', ' ',
                                        description_stripped_tags).strip()
    description_unescaped = html.unescape(description_without_spaces)
    return description_unescaped[:512]


def forward(apps, schema_editor):
    Job = apps.get_model('jobs', 'Job')
    JobOffer = apps.get_model('joboffers', 'JobOffer')
    UserCompanyProfile = apps.get_model('pycompanies', 'UserCompanyProfile')
    User = apps.get_model('auth', 'User')

    superuser = User.objects.filter(is_superuser=True).first()

    for job in Job.objects.all():
        if not job.email:
            email = UserCompanyProfile.objects.filter(
                company=job.company).first().user.email
        else:
            email = job.email

        SENIORITY_TO_EXPERIENCE_MAP = {
            '': '0',  # Tomo por defecto 0 a falta de otro valor mejor
            'Trainee': '0',
            'Junior': '2+',
            'Semi Senior': '5+',
            'Senior': '10+'
        }

        experience = SENIORITY_TO_EXPERIENCE_MAP[job.seniority]
        remoteness = 'REMOTE' if job.remote_work else 'IN_OFFICE'

        if job.is_active:
            thirty_days_ago = now() - timedelta(days=30)

            if job.modified < thirty_days_ago:
                state = 'EXPIRED'
            else:
                state = 'ACTIVE'
        elif job.jobinactivated_set.exists():
            state = 'REJECTED'
        else:
            state = 'DEACTIVATED'

        joboffer = JobOffer(id=job.id,
                            title=job.title,
                            company=job.company,
                            location=job.location,
                            contact_mail=email,
                            experience=experience,
                            remoteness=remoteness,
                            hiring_type='OTHER',
                            description=job.description,
                            created_at=job.created,
                            created_by=job.owner,
                            modified_at=job.modified,
                            modified_by=superuser,
                            short_description=get_short_description(
                                job.description),
                            state=state)

        joboffer.save()


class Migration(migrations.Migration):

    dependencies = [
        ('joboffers', '0015_alter_joboffer_company'),
        ('jobs', '0003_normalize_tags_20180428_1955'),
    ]

    operations = [migrations.RunPython(forward, migrations.RunPython.noop)]
